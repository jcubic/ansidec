{"version":3,"sources":["index.js"],"names":["factory","root","window","global","define","amd","TextEncoder","module","exports","require","ansi","undefined","chr","backspace_re","RegExp","overtyping_re","new_line_re","clear_line_re","overtyping","callback","string","removed_chars","new_position","char_count","backspaces","replace","position","result","push","start","correct_position","match","rep_string","last_index","length","Math","max","i","partial","substring","removed_char","index","map","b","chars","reverse","forEach","char","unshift","m","backspace","shift","break_next","format","style","re","_","bold","underline","ansi_colors","normal","black","red","green","yellow","blue","magenta","cyan","white","faited","palette","from_ansi","color_list","30","31","32","33","34","35","36","37","39","background_list","40","41","42","43","44","45","46","47","49","format_ansi","code","state","controls","split","num","styles","output_color","output_background","_process_true_color","_ex_color","_ex_background","_process_8bit","set_styles","Object","keys","key","italic","process_true_color","toString","slice","should__process_8bit","process_8bit","hasOwnProperty","parseInt","tmp","color","background","colors","ret","input","ansi_re","cursor_re","line","n","parts","filter","Boolean","len","join","Array","splitted","output","str","inside","formatting","reduce","acc","obj","args","concat","apply","text","html","File","bytes","pos","SAUCE_ID","COMNT_ID","commentCount","Uint8Array","this","get","Error","get16","v","get32","getC","String","fromCharCode","getS","lookahead","read","t","size","subarray","seek","newPos","peek","getPos","eof","sauce","version","title","author","group","date","fileSize","dataType","fileType","tInfo","comments","flags","zstring","sause","arg","uint_a","encode","f","meta"],"mappings":"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","sourcesContent":["/**@license\n *     ▄████████ ███▄▄▄▄      ▄████████  ▄█  ████████▄     ▄████████  ▄████████\n *   ███    ███ ███▀▀▀██▄   ███    ███ ███  ███   ▀███   ███    ███ ███    ███\n *   ███    ███ ███   ███   ███    █▀  ███▌ ███    ███   ███    █▀  ███    █▀\n *   ███    ███ ███   ███   ███        ███▌ ███    ███  ▄███▄▄▄     ███\n * ▀███████████ ███   ███ ▀███████████ ███▌ ███    ███ ▀▀███▀▀▀     ███\n *   ███    ███ ███   ███          ███ ███  ███    ███   ███    █▄  ███    █▄\n *   ███    ███ ███   ███    ▄█    ███ ███  ███   ▄███   ███    ███ ███    ███\n *   ███    █▀   ▀█   █▀   ▄████████▀  █▀   ████████▀    ██████████ ████████▀\n * v. 0.3.4\n *\n * Copyright (c) 2018-2019 Jakub T. Jankiewicz <https://jcubic.pl/me>\n * Released under the MIT license\n *\n * Contains: SAUCE parser from ansilove.js MIT license\n *\n * Based on jQuery Terminal's unix formatting\n *\n */\n/* global define, global, module, require, Uint8Array */\n(function(factory) {\n    var root = typeof window !== 'undefined' ? window : global;\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        // istanbul ignore next\n        define([], function() {\n            factory(window.TextEncoder);\n        });\n    } else if (typeof module === 'object' && module.exports) {\n        // Node/CommonJS\n        module.exports = factory(require('util').TextEncoder);\n    } else {\n        // Browser\n        // istanbul ignore next\n        root.ansi = factory(window.TextEncoder);\n    }\n})(function(TextEncoder, undefined) {\n    // we match characters and html entities because command line escape brackets\n    // echo don't, when writing formatter always process html entitites so it work\n    // for cmd plugin as well for echo\n    var chr = '[^\\\\x08]|[\\\\r\\\\n]{2}|&[^;]+;';\n    var backspace_re = new RegExp('^(' + chr + ')?\\\\x08');\n    var overtyping_re = new RegExp('^(?:(' + chr + ')?\\\\x08(_|\\\\1)|' +\n                                   '(_)\\\\x08(' + chr + '))');\n    var new_line_re = /^(\\r\\n|\\n\\r|\\r|\\n)/;\n    var clear_line_re = /[^\\r\\n]+\\r\\x1B\\[K/g;\n    // ---------------------------------------------------------------------\n    // :: Replace overtyping (from man) formatting with terminal formatting\n    // :: it also handle any backspaces\n    // ---------------------------------------------------------------------\n    function overtyping(callback, string) {\n        var removed_chars = [];\n        var new_position;\n        var char_count = 0;\n        var backspaces = [];\n        function replace(string, position) {\n            var result = '';\n            var push = 0;\n            var start;\n            char_count = 0;\n            function correct_position(start, match, rep_string) {\n                // logic taken from $.terminal.tracking_replace\n                if (start < position) {\n                    var last_index = start + match.length;\n                    if (last_index < position) {\n                        // It's after the replacement, move it\n                        new_position = Math.max(\n                            0,\n                            new_position +\n                                rep_string.length -\n                                match.length\n                        );\n                    } else {\n                        // It's *in* the replacement, put it just after\n                        new_position += rep_string.length - (position - start);\n                    }\n                }\n            }\n            for (var i = 0; i < string.length; ++i) {\n                var partial = string.substring(i);\n                var match = partial.match(backspace_re);\n                var removed_char = removed_chars[0];\n                if (match) {\n                    // we remove backspace and character or html entity before it\n                    // but we keep it in removed array so we can put it back\n                    // when we have caritage return or line feed\n                    if (match[1]) {\n                        start = i - match[1].length + push;\n                        removed_chars.push({\n                            index: start,\n                            string: match[1],\n                            overtyping: partial.match(overtyping_re)\n                        });\n                        correct_position(start, match[0], '', 1);\n                    }\n                    if (char_count < 0) {\n                        char_count = 0;\n                    }\n                    backspaces = backspaces.map(function(b) {\n                        return b - 1;\n                    });\n                    backspaces.push(start);\n                    return result + partial.replace(backspace_re, '');\n                } else if (partial.match(new_line_re)) {\n                    // if newline we need to add at the end all characters\n                    // removed by backspace but only if there are no more\n                    // other characters than backspaces added between\n                    // backspaces and newline\n                    if (removed_chars.length) {\n                        var chars = removed_chars;\n                        removed_chars = [];\n                        chars.reverse().forEach(function(char) {\n                            if (i > char.index) {\n                                if (--char_count <= 0) {\n                                    correct_position(char.index, '', char.string, 2);\n                                    result += char.string;\n                                }\n                            } else {\n                                removed_chars.unshift(char);\n                            }\n                        });\n                    }\n                    var m = partial.match(new_line_re);\n                    result += m[1];\n                    i += m[1].length - 1;\n                } else {\n                    if (backspaces.length) {\n                        var backspace = backspaces[0];\n                        if (i === backspace) {\n                            backspaces.shift();\n                        }\n                        if (i >= backspace) {\n                            char_count++;\n                        }\n                    }\n                    if (removed_chars.length) {\n                        // if we are in index of removed character we check if the\n                        // character is the same it will be bold or if removed char\n                        // or char at index is underscore then it will\n                        // be terminal formatting with underscore\n                        if (i > removed_char.index && removed_char.overtyping) {\n                            removed_chars.shift();\n                            correct_position(removed_char.index, '', removed_char.string);\n                            // if we add special character we need to correct\n                            // next push to removed_char array\n                            push++;\n                            // we use special characters instead of terminal\n                            // formatting so it's easier to proccess when removing\n                            // backspaces\n                            if (removed_char.string === string[i]) {\n                                result += string[i] + '\\uFFF1';\n                                continue;\n                            } else if (removed_char.string === '_' ||\n                                       string[i] === '_') {\n                                var chr;\n                                if (removed_char.string === '_') {\n                                    chr = string[i];\n                                } else {\n                                    chr = removed_char.string;\n                                }\n                                result += chr + '\\uFFF2';\n                                continue;\n                            }\n                        }\n                    }\n                    result += string[i];\n                }\n            }\n            return result;\n        }\n        var break_next = false;\n        // we need to clear line \\x1b[K in overtyping because it need to be before\n        // overtyping and from_ansi need to be called after so it escape stuff\n        // between Escape Code and cmd will have escaped formatting typed by user\n        string = string.replace(clear_line_re, '');\n        // loop until not more backspaces\n        while (string.match(/\\x08/) || removed_chars.length) {\n            string = replace(string, new_position);\n            if (break_next) {\n                break;\n            }\n            if (!string.match(/\\x08/)) {\n                // we break the loop so if removed_chars still chave items\n                // we don't have infite loop\n                break_next = true;\n            }\n        }\n        function format(string, chr, style) {\n            var re = new RegExp('((:?.' + chr + ')+)', 'g');\n            return string.replace(re, function(_, string) {\n                var re = new RegExp(chr, 'g');\n                return callback(style, null, null, string.replace(re, ''));\n            });\n        }\n        // replace special characters with terminal formatting\n        if (typeof callback === 'function') {\n            string = format(string, '\\uFFF1', {bold: true});\n            string = format(string, '\\uFFF2', {underline: true});\n        }\n        return string;\n    }\n    // ---------------------------------------------------------------------\n    // :: Html colors taken from ANSI formatting in Linux Terminal\n    // ---------------------------------------------------------------------\n    var ansi_colors = {\n        normal: {\n            black: '#000',\n            red: '#A00',\n            green: '#008400',\n            yellow: '#A50',\n            blue: '#00A',\n            magenta: '#A0A',\n            cyan: '#0AA',\n            white: '#AAA'\n        },\n        faited: {\n            black: '#000',\n            red: '#640000',\n            green: '#006100',\n            yellow: '#737300',\n            blue: '#000087',\n            magenta: '#650065',\n            cyan: '#008787',\n            white: '#818181'\n        },\n        bold: {\n            black: '#444',\n            red: '#F55',\n            green: '#44D544',\n            yellow: '#FF5',\n            blue: '#55F',\n            magenta: '#F5F',\n            cyan: '#5FF',\n            white: '#FFF'\n        },\n        // XTerm 8-bit pallete\n        palette: [\n            '#000000', '#AA0000', '#00AA00', '#AA5500', '#0000AA', '#AA00AA',\n            '#00AAAA', '#AAAAAA', '#555555', '#FF5555', '#55FF55', '#FFFF55',\n            '#5555FF', '#FF55FF', '#55FFFF', '#FFFFFF', '#000000', '#00005F',\n            '#000087', '#0000AF', '#0000D7', '#0000FF', '#005F00', '#005F5F',\n            '#005F87', '#005FAF', '#005FD7', '#005FFF', '#008700', '#00875F',\n            '#008787', '#0087AF', '#0087D7', '#0087FF', '#00AF00', '#00AF5F',\n            '#00AF87', '#00AFAF', '#00AFD7', '#00AFFF', '#00D700', '#00D75F',\n            '#00D787', '#00D7AF', '#00D7D7', '#00D7FF', '#00FF00', '#00FF5F',\n            '#00FF87', '#00FFAF', '#00FFD7', '#00FFFF', '#5F0000', '#5F005F',\n            '#5F0087', '#5F00AF', '#5F00D7', '#5F00FF', '#5F5F00', '#5F5F5F',\n            '#5F5F87', '#5F5FAF', '#5F5FD7', '#5F5FFF', '#5F8700', '#5F875F',\n            '#5F8787', '#5F87AF', '#5F87D7', '#5F87FF', '#5FAF00', '#5FAF5F',\n            '#5FAF87', '#5FAFAF', '#5FAFD7', '#5FAFFF', '#5FD700', '#5FD75F',\n            '#5FD787', '#5FD7AF', '#5FD7D7', '#5FD7FF', '#5FFF00', '#5FFF5F',\n            '#5FFF87', '#5FFFAF', '#5FFFD7', '#5FFFFF', '#870000', '#87005F',\n            '#870087', '#8700AF', '#8700D7', '#8700FF', '#875F00', '#875F5F',\n            '#875F87', '#875FAF', '#875FD7', '#875FFF', '#878700', '#87875F',\n            '#878787', '#8787AF', '#8787D7', '#8787FF', '#87AF00', '#87AF5F',\n            '#87AF87', '#87AFAF', '#87AFD7', '#87AFFF', '#87D700', '#87D75F',\n            '#87D787', '#87D7AF', '#87D7D7', '#87D7FF', '#87FF00', '#87FF5F',\n            '#87FF87', '#87FFAF', '#87FFD7', '#87FFFF', '#AF0000', '#AF005F',\n            '#AF0087', '#AF00AF', '#AF00D7', '#AF00FF', '#AF5F00', '#AF5F5F',\n            '#AF5F87', '#AF5FAF', '#AF5FD7', '#AF5FFF', '#AF8700', '#AF875F',\n            '#AF8787', '#AF87AF', '#AF87D7', '#AF87FF', '#AFAF00', '#AFAF5F',\n            '#AFAF87', '#AFAFAF', '#AFAFD7', '#AFAFFF', '#AFD700', '#AFD75F',\n            '#AFD787', '#AFD7AF', '#AFD7D7', '#AFD7FF', '#AFFF00', '#AFFF5F',\n            '#AFFF87', '#AFFFAF', '#AFFFD7', '#AFFFFF', '#D70000', '#D7005F',\n            '#D70087', '#D700AF', '#D700D7', '#D700FF', '#D75F00', '#D75F5F',\n            '#D75F87', '#D75FAF', '#D75FD7', '#D75FFF', '#D78700', '#D7875F',\n            '#D78787', '#D787AF', '#D787D7', '#D787FF', '#D7AF00', '#D7AF5F',\n            '#D7AF87', '#D7AFAF', '#D7AFD7', '#D7AFFF', '#D7D700', '#D7D75F',\n            '#D7D787', '#D7D7AF', '#D7D7D7', '#D7D7FF', '#D7FF00', '#D7FF5F',\n            '#D7FF87', '#D7FFAF', '#D7FFD7', '#D7FFFF', '#FF0000', '#FF005F',\n            '#FF0087', '#FF00AF', '#FF00D7', '#FF00FF', '#FF5F00', '#FF5F5F',\n            '#FF5F87', '#FF5FAF', '#FF5FD7', '#FF5FFF', '#FF8700', '#FF875F',\n            '#FF8787', '#FF87AF', '#FF87D7', '#FF87FF', '#FFAF00', '#FFAF5F',\n            '#FFAF87', '#FFAFAF', '#FFAFD7', '#FFAFFF', '#FFD700', '#FFD75F',\n            '#FFD787', '#FFD7AF', '#FFD7D7', '#FFD7FF', '#FFFF00', '#FFFF5F',\n            '#FFFF87', '#FFFFAF', '#FFFFD7', '#FFFFFF', '#080808', '#121212',\n            '#1C1C1C', '#262626', '#303030', '#3A3A3A', '#444444', '#4E4E4E',\n            '#585858', '#626262', '#6C6C6C', '#767676', '#808080', '#8A8A8A',\n            '#949494', '#9E9E9E', '#A8A8A8', '#B2B2B2', '#BCBCBC', '#C6C6C6',\n            '#D0D0D0', '#DADADA', '#E4E4E4', '#EEEEEE'\n        ]\n    };\n    var from_ansi = (function() {\n        var color_list = {\n            30: 'black',\n            31: 'red',\n            32: 'green',\n            33: 'yellow',\n            34: 'blue',\n            35: 'magenta',\n            36: 'cyan',\n            37: 'white',\n\n            39: 'inherit' // default color\n        };\n        var background_list = {\n            40: 'black',\n            41: 'red',\n            42: 'green',\n            43: 'yellow',\n            44: 'blue',\n            45: 'magenta',\n            46: 'cyan',\n            47: 'white',\n\n            49: 'transparent' // default background\n        };\n        function format_ansi(code, state) {\n            var controls = code.split(';');\n            var num;\n            var styles = [];\n            var output_color = '';\n            var output_background = '';\n            var _process_true_color = -1;\n            var _ex_color = false;\n            var _ex_background = false;\n            var _process_8bit = false;\n            var palette = ansi_colors.palette;\n            function set_styles(num) {\n                switch (num) {\n                    case 0:\n                        Object.keys(state).forEach(function(key) {\n                            delete state[key];\n                        });\n                        state.bold = false;\n                        state.faited = false;\n                        break;\n                    case 1:\n                        styles.bold = state.bold = true;\n                        state.faited = false;\n                        break;\n                    case 4:\n                        styles.underline = state.underline = true;\n                        break;\n                    case 3:\n                        styles.italic = state.italic = true;\n                        break;\n                    case 5:\n                        if (_ex_color || _ex_background) {\n                            _process_8bit = true;\n                        }\n                        break;\n                    case 38:\n                        _ex_color = true;\n                        break;\n                    case 48:\n                        _ex_background = true;\n                        break;\n                    case 2:\n                        if (_ex_color || _ex_background) {\n                            _process_true_color = 0;\n                        } else {\n                            state.faited = true;\n                            state.bold = false;\n                        }\n                        break;\n                    case 7:\n                        state.reverse = true;\n                        break;\n                    default:\n                        if (controls[1] !== '5') {\n                            if (color_list[num]) {\n                                output_color = color_list[num];\n                            }\n                            if (background_list[num]) {\n                                output_background = background_list[num];\n                            }\n                        }\n                }\n            }\n            // -----------------------------------------------------------------\n            function process_true_color() {\n                if (_ex_color) {\n                    if (!output_color) {\n                        output_color = '#';\n                    }\n                    if (output_color.length < 7) {\n                        output_color += ('0' + num.toString(16)).slice(-2);\n                    }\n                }\n                if (_ex_background) {\n                    if (!output_background) {\n                        output_background = '#';\n                    }\n                    if (output_background.length < 7) {\n                        output_background += ('0' + num.toString(16)).slice(-2);\n                    }\n                }\n                if (_process_true_color === 2) {\n                    _process_true_color = -1;\n                } else {\n                    _process_true_color++;\n                }\n            }\n            // -----------------------------------------------------------------\n            function should__process_8bit() {\n                return _process_8bit && ((_ex_background && !output_background) ||\n                                        (_ex_color && !output_color));\n            }\n            // -----------------------------------------------------------------\n            function process_8bit() {\n                if (_ex_color && palette[num] && !output_color) {\n                    output_color = palette[num];\n                }\n                if (_ex_background && palette[num] && !output_background) {\n                    output_background = palette[num];\n                }\n                _process_8bit = false;\n            }\n            // -----------------------------------------------------------------\n            for (var i in controls) {\n                if (controls.hasOwnProperty(i)) {\n                    num = parseInt(controls[i], 10);\n                    if (_process_true_color > -1) {\n                        process_true_color();\n                    } else if (should__process_8bit()) {\n                        process_8bit();\n                    } else {\n                        set_styles(num);\n                    }\n                }\n            }\n            if (state.reverse) {\n                if (output_color || output_background) {\n                    var tmp = output_background;\n                    output_background = output_color;\n                    output_color = tmp;\n                } else {\n                    output_color = 'black';\n                    output_background = 'white';\n                }\n            }\n            output_color = output_color || state.color;\n            output_background = output_background || state.background;\n            state.background = output_background;\n            state.color = output_color;\n            var colors, color, background;\n            if (state.bold) {\n                colors = ansi_colors.bold;\n            } else if (state.faited) {\n                colors = ansi_colors.faited;\n            } else {\n                colors = ansi_colors.normal;\n            }\n            if (typeof output_color !== 'undefined') {\n                if (output_color.match(/^#/)) {\n                    color = output_color;\n                } else if (output_color === 'inherit') {\n                    color = output_color;\n                } else {\n                    color = colors[output_color];\n                }\n            }\n            if (typeof output_background !== 'undefined') {\n                if (output_background.match(/^#/)) {\n                    background = output_background;\n                } else if (output_background === 'transparent') {\n                    background = output_background;\n                } else {\n                    background = ansi_colors.normal[output_background];\n                }\n            }\n            var ret = [styles, color, background];\n            return ret;\n        }\n        return function from_ansi(callback, input) {\n            var state = {}; // used to inherit vales from previous formatting\n            var ansi_re = /(\\x1B\\[[0-9;]*[A-Za-z])/g;\n            var cursor_re = /(.*)\\r?\\n\\x1b\\[1A\\x1b\\[([0-9]+)C/g;\n            // move up and right we need to delete what's after in previous line\n            input = input.replace(cursor_re, function(_, line, n) {\n                n = parseInt(n, 10);\n                var parts = line.split(ansi_re).filter(Boolean);\n                var result = [];\n                for (var i = 0; i < parts.length; ++i) {\n                    if (parts[i].match(ansi_re)) {\n                        result.push(parts[i]);\n                    } else {\n                        var len = parts[i].length;\n                        if (len > n) {\n                            result.push(parts[i].substring(0, n));\n                            break;\n                        } else {\n                            result.push(parts[i]);\n                        }\n                        n -= len;\n                    }\n                }\n                return result.join('');\n            });\n            // move right is just repate space\n            input = input.replace(/\\x1b\\[([0-9]+)C/g, function(_, num) {\n                return new Array(+num + 1).join(' ');\n            });\n            var splitted = input.split(ansi_re);\n            if (splitted.length === 1) {\n                return input;\n            }\n            var output = [];\n            //skip closing at the begining\n            if (splitted.length > 3) {\n                var str = splitted.slice(0, 3).join('');\n                if (str.match(/^\\[0*m$/)) {\n                    splitted = splitted.slice(3);\n                }\n            }\n            var code, match, inside = false;\n            for (var i = 0; i < splitted.length; ++i) {\n                match = splitted[i].match(/^\\x1B\\[([0-9;]*)([A-Za-z])$/);\n                if (match) {\n                    switch (match[2]) {\n                        case 'm':\n                            code = format_ansi(match[1], state);\n                            if (inside) {\n                                if (+match[1] === 0) {\n                                    inside = false;\n                                    output.push(false);\n                                } else {\n                                    output.push(code);\n                                }\n                            } else if (+match[1] !== 0) {\n                                output.push(code);\n                                inside = true;\n                            }\n                            break;\n                    }\n                } else {\n                    output.push(splitted[i].replace(/\\x1b\\[[0-9;]*/g, ''));\n                }\n            }\n            var formatting;\n            return output.reduce(function(acc, obj) {\n                if (typeof obj === 'string') {\n                    if (formatting && obj) {\n                        var args = formatting.concat([obj]);\n                        if (typeof callback === 'function') {\n                            return acc + callback.apply(null, args);\n                        }\n                    }\n                    formatting = null;\n                    return acc + obj;\n                } else {\n                    formatting = obj;\n                    return acc;\n                }\n            }, '');\n        };\n    })();\n    // -------------------------------------------------------------------------\n    function format(callback, text) {\n        if (text === undefined) {\n            return function(text) {\n                return format(callback, text);\n            };\n        }\n        return from_ansi(callback, overtyping(callback, text));\n    }\n    // -------------------------------------------------------------------------\n    function html(text) {\n        return format(function(styles, color, background, text) {\n            var style = [];\n            if (color) {\n                style.push('color:' + color);\n            }\n            if (background) {\n                style.push('background:' + background);\n            }\n            if (styles.bold) {\n                style.push('font-weight:bold');\n            }\n            if (styles.italic) {\n                style.push('font-style:italic');\n            }\n            if (styles.underline) {\n                styles.push('text-decoration:underline');\n            }\n            return '<span style=\"' + style.join(';') + '\">' + text + '</span>';\n        }, text);\n    }\n    // -------------------------------------------------------------------------\n    // :: SAUSE parser\n    // :: http://www.acid.org/info/sauce/sauce.htm\n    // :: source: https://github.com/nvdnkpr/ansilove.js\n    // -------------------------------------------------------------------------\n    // This function returns an object that emulates basic file-handling when\n    // fed an array of bytes.\n    // -------------------------------------------------------------------------\n    function File(bytes) {\n        // pos points to the current position in the 'file'. SAUCE_ID, COMNT_ID,\n        // and commentCount are used later when parsing the SAUCE record.\n        var pos, SAUCE_ID, COMNT_ID, commentCount;\n\n        // Raw Bytes for \"SAUCE\" and \"COMNT\", used when parsing SAUCE records.\n        SAUCE_ID = new Uint8Array([0x53, 0x41, 0x55, 0x43, 0x45]);\n        COMNT_ID = new Uint8Array([0x43, 0x4F, 0x4D, 0x4E, 0x54]);\n\n        // Returns an 8-bit byte at the current byte position, <pos>. Also\n        // advances <pos> by a single byte. Throws an error if we advance beyond\n        // the length of the array.\n        this.get = function() {\n            if (pos >= bytes.length) {\n                throw new Error(\"Unexpected end of file reached.\");\n            }\n            return bytes[pos++];\n        };\n\n        // Same as get(), but returns a 16-bit byte. Also advances <pos>\n        // by two (8-bit) bytes.\n        this.get16 = function() {\n            var v;\n            v = this.get();\n            return v + (this.get() << 8);\n        };\n\n        // Same as get(), but returns a 32-bit byte. Also advances <pos>\n        // by four (8-bit) bytes.\n        this.get32 = function() {\n            var v;\n            v = this.get();\n            v += this.get() << 8;\n            v += this.get() << 16;\n            return v + (this.get() << 24);\n        };\n\n        // Exactly the same as get(), but returns a character symbol,\n        // instead of the value. e.g. 65 = \"A\".\n        this.getC = function() {\n            return String.fromCharCode(this.get());\n        };\n\n        // Returns a string of <num> characters at the current file position,\n        // and strips the trailing whitespace characters.\n        // Advances <pos> by <num> by calling getC().\n        this.getS = function(num) {\n            var string;\n            string = \"\";\n            while (num-- > 0) {\n                string += this.getC();\n            }\n            return string.replace(/[\\x00\\s]+$/, '');\n        };\n\n        // Returns \"true\" if, at the current <pos>, a string of characters\n        // matches <match>. Does not increment <pos>.\n        this.lookahead = function(match) {\n            if (SAUCE_ID === match) {\n                //debugger;\n            }\n            var i;\n            for (i = 0; i < match.length; ++i) {\n                if ((pos + i === bytes.length) || (bytes[pos + i] !== match[i])) {\n                    break;\n                }\n            }\n            return i === match.length;\n        };\n\n        // Returns an array of <num> bytes found at the current <pos>. Also\n        // increments <pos>.\n        this.read = function(num) {\n            var t;\n            t = pos;\n            // If num is undefined, return all the bytes until the end of file.\n            num = num || this.size - pos;\n            while (++pos < this.size) {\n                if (--num === 0) {\n                    break;\n                }\n            }\n            return bytes.subarray(t, pos);\n        };\n\n        // Sets a new value for <pos>. Equivalent to seeking a file to a new position.\n        this.seek = function(newPos) {\n            pos = newPos;\n        };\n\n        // Returns the value found at <pos>, without incrementing <pos>.\n        this.peek = function(num) {\n            num = num || 0;\n            return bytes[pos + num];\n        };\n\n        // Returns the the current position being read in the file, in amount\n        // of bytes. i.e. <pos>.\n        this.getPos = function() {\n            return pos;\n        };\n\n        // Returns true if the end of file has been reached. <this.size> is set\n        // later by the SAUCE parsing section, as it is not always the same\n        // value as the length of <bytes>. (In case there is a SAUCE record,\n        // and optional comments).\n        this.eof = function() {\n            return pos === this.size;\n        };\n\n        // Seek to the position we would expect to find a SAUCE record.\n        pos = bytes.length - 128;\n        // If we find \"SAUCE\".\n        if (this.lookahead(SAUCE_ID)) {\n            this.sauce = {};\n            // Read \"SAUCE\".\n            this.getS(5);\n            // Read and store the various SAUCE values.\n            this.sauce.version = this.getS(2); // String, maximum of 2 characters\n            this.sauce.title = this.getS(35); // String, maximum of 35 characters\n            this.sauce.author = this.getS(20); // String, maximum of 20 characters\n            this.sauce.group = this.getS(20); // String, maximum of 20 characters\n            this.sauce.date = this.getS(8); // String, maximum of 8 characters\n            this.sauce.fileSize = this.get32(); // unsigned 32-bit\n            this.sauce.dataType = this.get(); // unsigned 8-bit\n            this.sauce.fileType = this.get(); // unsigned 8-bit\n            this.sauce.tInfo = [];\n            this.sauce.tInfo.push(this.get16()); // unsigned 16-bit\n            this.sauce.tInfo.push(this.get16()); // unsigned 16-bit\n            this.sauce.tInfo.push(this.get16()); // unsigned 16-bit\n            this.sauce.tInfo.push(this.get16()); // unsigned 16-bit\n            // Initialize the comments array.\n            this.sauce.comments = [];\n            commentCount = this.get(); // unsigned 8-bit\n            this.sauce.flags = this.get(); // unsigned 8-bit\n            this.sauce.zstring = this.getS(22);\n            if (commentCount > 0) {\n                // If we have a value for the comments amount, seek to the position\n                // we'd expect to find them...\n                pos = bytes.length - 128 - (commentCount * 64) - 5;\n                // ... and check that we find a COMNT header.\n                if (this.lookahead(COMNT_ID)) {\n                    // Read COMNT ...\n                    this.getS(5);\n                    // ... and push everything we find after that into\n                    // our <this.sauce.comments> array, in 64-byte chunks,\n                    // stripping the trailing whitespace in the getS() function.\n                    while (commentCount-- > 0) {\n                        this.sauce.comments.push(this.getS(64));\n                    }\n                }\n            }\n        }\n        // Seek back to the start of the file, ready for reading.\n        pos = 0;\n\n        if (this.sauce) {\n            // If we have found a SAUCE record, and the fileSize field passes\n            // some basic sanity checks...\n            if (this.sauce.fileSize > 0 && this.sauce.fileSize < bytes.length) {\n                // Set <this.size> to the value set in SAUCE.\n                this.size = this.sauce.fileSize;\n            } else {\n                // If it fails the sanity checks, just assume that SAUCE record\n                // can't be trusted, and set <this.size> to the position\n                // where the SAUCE record begins.\n                this.size = bytes.length - 128;\n            }\n        } else {\n            // If there is no SAUCE record, assume that everything\n            // in <bytes> relates to an image.\n            this.size = bytes.length;\n        }\n    }\n    // -------------------------------------------------------------------------\n    function sause(arg) {\n        var uint_a;\n        if (typeof arg === 'string') {\n            uint_a = new Uint8Array(new TextEncoder('utf8').encode(arg));\n        } else {\n            uint_a = arg;\n        }\n        var f = new File(uint_a);\n        return f.sauce;\n    }\n    // -------------------------------------------------------------------------\n    return {\n        version: '0.3.4',\n        meta: sause,\n        format: format,\n        html: html,\n        colors: ansi_colors\n    };\n});\n"]}